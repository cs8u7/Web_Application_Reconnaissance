import requests
import html
import argparse
import sys
import re
import os
import subprocess

def main():
  parser = argparse.ArgumentParser(description="CVE data collector tool. Create an empty folder in directory contain the tool.")
  parser.add_argument('--exploit', type=str, help="Collect CVE content on exploit-db.com base on CVE_id.")
  parser.add_argument('--page', type=str, help="Return CVE_id listed on exploit-db.")
  parser.add_argument('--search', type=str, help="Search key word in stored CVE.")
  args = parser.parse_args()

  if not os.path.exists('./exploit-db'):
    os.makedirs('./exploit-db')

  if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)
  
  if args.exploit:
    exploit_func(args.exploit,parser)

  if args.page:
    page_func(args.page,parser)

  if args.search:
    search_func(args.search)

def write_to_file(data, filename):
  with open(filename, 'w') as f:
    f.write(data)

def exploit(id):
  filename = './exploit-db/' + str(id) +'.txt'

  if not os.path.exists(filename):
    open(filename, 'a').close()
    url = 'https://exploit-db.com/exploits/{}'.format(id)
    headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
    res= requests.get(url, headers = headers)
    exploit = res.text[res.text.find('<code') : res.text.find('</code>')]
    exploit = html.unescape(exploit[exploit.find('">') +2 :])

    write_to_file(exploit,filename)
    subprocess.run(['xdg-open', filename], check=True)
  else:
    subprocess.run(['xdg-open', filename], check=True)
    
def exploit_func(exploit_input,parser):
  url_pattern = r'^https://www.exploit-db\.com/exploits/\d+$'
  match_url = re.match(url_pattern, exploit_input)
  if match_url:
    segments = exploit_input.split('/')
    exploit(segments[-1])
  elif exploit_input.isdigit():
    exploit(exploit_input)
  else:
    parser.print_help()
    exit()
  

def page_func(page,parser):
  try:
    page = int(page)
  except:
    parser.print_help()
    exit()
  
  files = sorted(os.listdir('./exploit-db'))
  index = [0,1,2,3,4]
  for i in range(5):
    index[i] = index[i] + page*5
  output_list = []
  for file in index:
    try:
      output_list.append(files[file].split('.')[0])
    except:
      break
  output_list = list(map(int,output_list))
  for cve_id in output_list:
    print(cve_id)

def search_func(keyword):
  data = keyword.strip()
  key_set = data.split(' ')
  match_set = []
  regex_data = '|'.join(key_set)
  regex_pattern = r'\b(' + regex_data + r')\b'
  files = os.listdir('./exploit-db')
  for file in files:
    with open('./exploit-db/'+file, 'r') as file:
      for line in file:
        words = re.split(r'[^a-zA-Z]+', line)
        while '' in words:
          words.remove('')
        if words.__len__() != 0:
          for word in words:
            if re.search(regex_pattern, word):
              match_set.append(file.name)

  clean_match_set = set(match_set)
  for match in clean_match_set:
    print(match)

if __name__ == '__main__':
  main()